package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import dao.mappers.IMapResultSetIntoEntity;
import dao.repositories.IUserRepository;
import domain.model.User;
import dao.uow.IUnitOfWork;

public class UserRepository extends RepositoryBase<User> implements IUserRepository {

	public UserRepository(Connection connection, IMapResultSetIntoEntity<User> mapper, IUnitOfWork uow) {
		super(connection, mapper, uow);
	}
	
	private PreparedStatement getName;
    //private PreparedStatement getSurname;

	@Override
	protected String createTableSql() {
		return "" + "CREATE TABLE user(" + "id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
				+ "name varchar(20)," + "surname varchar(50)" + ")";
	}

	@Override
	protected String tableName() {
		return "user";
	}

	protected String insertSql() {
		return "INSERT INTO user(name, surname) VALUES (?,?)";
	}

	protected String updateSql() {
		return "UPDATE user SET (name, surname)=(?,?) WHERE id=?";
	}

	protected String getNameSql() {
		return "SELECT * FROM user where name = ?";
	}

	protected String getSurNameSql() {
		return "SELECT * FROM user where surName=?";
	}

	@Override
	protected void setUpdate(User entity) throws SQLException {
		update.setString(1, entity.getName());
		update.setString(2, entity.getSurname());

	}

	@Override
	protected void setInsert(User entity) throws SQLException {
		insert.setString(1, entity.getName());
		insert.setString(2, entity.getSurname());
	}

	private List<User> searchBy(String value) {
		List<User> user = new ArrayList<>();
		try {
			getName.setString(1, value);
			ResultSet resultSet = getName.executeQuery();
			while (resultSet.next()) {
				user.add(mapper.map(resultSet));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return user;
	}

	public List<User> withName(String name) {
		return searchBy(name);
	}

	public List<User> withSurname(String surname) {
		return searchBy(surname);
	}

}
